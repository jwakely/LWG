<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3638" status="New">
<title><tt>vector&lt;bool&gt;::swap(reference, reference)</tt> is useless</title>
<section><sref ref="[vector.bool]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>12 Nov 2021</date>
<priority>99</priority>

<discussion>
<p>
<tt>vector&lt;bool&gt;</tt> provides a static member function that can be used to swap 
rvalues of type <tt>vector&lt;bool&gt;::reference</tt> like so:
</p>
<blockquote><pre>
vector&lt;bool&gt; v{true, false};
vector&lt;bool&gt;::swap(v[0], v[1]);
</pre></blockquote>
<p>
This is not useful. Nobody calls <tt>swap</tt> like that. This fails to make <tt>v[0]</tt> swappable with 
<tt>v[1]</tt> as per <sref ref="[swappable.requirements]"/>. The similar SGI STL <tt>bit_vector</tt> class 
that <tt>vector&lt;bool&gt;</tt> is partially inspired by has a "global function" with the same signature, 
<a href="https://www.boost.org/sgi/stl/bit_vector.html">described as</a>:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
"Swaps the bits referred to by <tt>x</tt> and <tt>y</tt>. This is a global function, not a member function. 
It is necessary because the ordinary version of <tt>swap</tt> takes arguments of type <tt>T&amp;</tt>, and 
<tt>bit_vector::reference</tt> is a class, not a built-in C++ reference."
</p>
</blockquote>
<p>
For some reason this became a static member function of <tt>vector&lt;bool&gt;</tt> in the C++ standard.
<p/>
We should restore the intended functionality, and deprecate the useless function.
</p>

<note>2022-01-22; Jonathan replaces <code>swap(x, y)</code> in the Annex D
wording, following reflector discussion about lookup for <code>swap</code>
finding itself in that context.
</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>

<li><p>Create a new subclause [vector.bool.general] below <sref ref="[vector.bool]"/> and move paragraphs p1-p3 
(including the class template <tt>vector&lt;bool, Allocator&gt;</tt> partial specialization synopsis) into that 
subclause.</p>
</li>

<li><p>Add to the synopsis in [vector.bool.general] p1 (n&eacute;e <sref ref="[vector.bool]"/> p1):</p>

<blockquote>
<pre>
[&hellip;]
<i>// bit reference</i>
class reference {
  friend class vector;
  constexpr reference() noexcept;
public:
  constexpr reference(const reference&amp;) = default;
  constexpr ~reference();
  constexpr operator bool() const noexcept;
  constexpr reference&amp; operator=(bool x) noexcept;
  constexpr reference&amp; operator=(const reference&amp; x) noexcept;
  constexpr const reference&amp; operator=(bool x) const noexcept;
  constexpr void flip() noexcept; <i>// flips the bit</i>
  
  <ins>friend constexpr void swap(reference x, reference y) noexcept;
  friend constexpr void swap(reference x, bool&amp; y) noexcept;
  friend constexpr void swap(bool&amp; x, reference y) noexcept;</ins>
};
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Remove the static <tt>swap</tt> function from the class template <tt>vector&lt;bool, Allocator&gt;</tt> 
partial specialization synopsis:</p>

<blockquote>
<pre>
[&hellip;]
constexpr void swap(vector&amp;);
<del>constexpr static void swap(reference x, reference y) noexcept;</del>
constexpr void flip() noexcept; <i>// flips all bits</i>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Create a new subclause [vector.bool.ref] after p3, with p4 as its first paragraph, and add after it:</p>

<blockquote>
<p>
<ins><b>22.3.12.? Class <tt>vector&lt;bool, Allocator&gt;::reference</tt> [vector.bool.ref]</b></ins>
<p/>
-1- <tt>reference</tt> is a class that simulates the behavior of references of a single bit in <tt>vector&lt;bool&gt;</tt>. 
The conversion function returns <tt>true</tt> when the bit is set, and <tt>false</tt> otherwise. The assignment 
operators set the bit when the argument is (convertible to) <tt>true</tt> and clear it otherwise. 
<tt>flip</tt> reverses the state of the bit.
</p>
<pre>
<ins>constexpr void flip() noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> <tt>*this = !*this;</tt></ins>
</p>
</blockquote>
<pre>
 <ins>friend constexpr void swap(reference x, reference y) noexcept;
 friend constexpr void swap(reference x, bool&amp; y) noexcept;
 friend constexpr void swap(bool&amp; x, reference y) noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Exchanges the contents of <tt>x</tt> and <tt>y</tt> as if by:</ins>
</p>
<blockquote><pre>
<ins>bool b = x;
x = y;
y = b;</ins>
</pre></blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Create a new subclause [vector.bool.mem] after that, containing the paragraphs 
describing <tt>flip()</tt> and the <tt>hash</tt> specialization:</p>

<blockquote>
<p>
<ins><b>22.3.12.? Class <tt>vector&lt;bool, Allocator&gt;</tt> members [vector.bool.mem]</b></ins>
</p>
<pre>
constexpr void flip() noexcept;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Replaces each element in the container with its complement.
</p>
</blockquote>
<pre>
 <del>constexpr static void swap(reference x, reference y) noexcept;</del>
</pre>
<blockquote>
<p>
<del>-6- <i>Effects:</i> Exchanges the contents of <tt>x</tt> and <tt>y</tt> as if by:</del>
</p>
<blockquote><pre>
<del>bool b = x;
x = y;
y = b;</del>
</pre></blockquote>
</blockquote>
<pre>
template&lt;class Allocator&gt; struct hash&lt;vector&lt;bool, Allocator&gt;&gt;;
</pre>
<blockquote>
<p>
-7- The specialization is enabled (<sref ref="[unord.hash]"/>).
</p>
</blockquote>
</blockquote>
</li>

<li><p>Create a new subclause [depr.vector.bool.swap] after <sref ref="[depr.string.capacity]"/></p>

<blockquote>
<p>
<ins><b>D.? Deprecated <tt>vector&lt;bool, Allocator&gt;</tt> swap [depr.vector.bool.swap]</b></ins>
<p/>
<ins>-?- The following member is declared in addition to those members specified in <sref ref="[vector.bool]"/>:</ins>
</p>
<pre>
<ins>namespace std {
  template&lt;class Allocator&gt; class vector&lt;bool, Allocator&gt; {
  public:
    constexpr static void swap(reference x, reference y) noexcept;
  };
}</ins>
</pre>
<pre>
<ins>constexpr static void swap(reference x, reference y) noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Exchanges the contents of <tt>x</tt> and <tt>y</tt> as if by:</ins>
</p>
<blockquote><pre>
<ins>bool b = x;
x = y;
y = b;</ins>
</pre></blockquote>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
